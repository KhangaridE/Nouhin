#!/usr/bin/env python3 """Complete integration test for automatic delivery system """import os import sys from pathlib import Path # Add app directory to path sys.path.insert(0, str(Path(__file__).parent / "app")) sys.path.insert(0, str(Path(__file__).parent / "delivery")) def test_environment(): """Test environment configuration"""print("Testing Environment Configuration") print("-"* 40) required_vars = [ 'SLACK_BOT_TOKEN', 'STORAGE_TOKEN', 'GOOGLE_SHEETS_STATUS_URL', 'GOOGLE_SHEETS_METADATA_URL' ] missing_vars = [] for var in required_vars: value = os.getenv(var) if value: print(f"{var}: {'*' * (len(value) - 10) + value[-10:]}") else: print(f"{var}: Not set") missing_vars.append(var) if missing_vars: print(f"\n Missing environment variables: {', '.join(missing_vars)}") print("Please add them to .streamlit/secrets.toml or environment") return False print("All required environment variables are set") return True def test_google_sheets(): """Test Google Sheets service"""print("\n Testing Google Sheets Service") print("-"* 40) try: from google_sheets_service import GoogleSheetsService service = GoogleSheetsService() if not service.service: print("Google Sheets service failed to initialize") return False print("Google Sheets service initialized successfully") # Test reading status sheet status_url = os.getenv('GOOGLE_SHEETS_STATUS_URL') if status_url: try: status_reports = service.get_status_reports(status_url) print(f"Status sheet read: {len(status_reports)} reports found") # Show sample of ready reports ready_reports = [r for r in status_reports if r['status'] == ''] print(f"Reports with status '': {len(ready_reports)}") if ready_reports: print("Sample ready report:") sample = ready_reports[0] print(f"• Task ID: {sample['task_id']}") print(f"• Name: {sample['task_name'][:50]}...") print(f"• Status: {sample['status']}") return True except Exception as e: print(f"Error reading status sheet: {e}") return False else: print("GOOGLE_SHEETS_STATUS_URL not set") return False except Exception as e: print(f"Error initializing Google Sheets service: {e}") return False def test_automatic_delivery(): """Test automatic delivery manager"""print("\n Testing Automatic Delivery Manager") print("-"* 40) try: from automatic_delivery_manager import AutomaticDeliveryManager manager = AutomaticDeliveryManager() # Test configuration status status = manager.get_configuration_status() print("Configuration Status:") for key, value in status.items(): emoji = ""if value else ""print(f"{emoji} {key}: {value}") # Test checking ready reports (without delivery) try: ready_reports = manager.check_ready_reports() print(f"Found {len(ready_reports)} ready reports") if ready_reports: print("Ready reports:") for report in ready_reports[:3]: # Show first 3 print(f"• {report['task_id']}: {report['task_name'][:40]}...") return True except Exception as e: print(f"Error checking ready reports: {e}") return False except Exception as e: print(f"Error initializing automatic delivery manager: {e}") return False def test_report_manager(): """Test report manager with automatic mode"""print("\n Testing Report Manager") print("-"* 40) try: from report_manager import ReportManager manager = ReportManager() # Load reports reports = manager.load_reports() print(f"Loaded {len(reports)} reports from GitHub storage") # Check for automatic reports automatic_reports = manager.get_automatic_reports() print(f"Found {len(automatic_reports)} automatic reports") # Show delivery mode breakdown mode_counts = {'manual': 0, 'scheduled': 0, 'automatic': 0} for report in reports.values(): mode = report.get('delivery_mode', 'manual') mode_counts[mode] += 1 print("Delivery mode breakdown:") for mode, count in mode_counts.items(): print(f"• {mode}: {count}") return True except Exception as e: print(f"Error testing report manager: {e}") return False def main(): """Run all tests"""print("Automatic Delivery Integration Test") print("="* 50) tests = [ test_environment, test_google_sheets, test_automatic_delivery, test_report_manager ] passed = 0 total = len(tests) for test in tests: try: if test(): passed += 1 else: print(f"{test.__name__} failed") except Exception as e: print(f"{test.__name__} crashed: {e}") print(f"\n Test Results: {passed}/{total} passed") if passed == total: print("All tests passed! The automatic delivery system should be working.") else: print("Some tests failed. Please check the configuration and fix the issues.") print("\n Quick Fix Guide:") print("1. Copy .streamlit/secrets.toml.template to .streamlit/secrets.toml") print("2. Add your actual tokens and Google Sheets URLs") print("3. Make sure google-service-account.json has the right credentials") print("4. Run this test again") if __name__ == "__main__": main() 